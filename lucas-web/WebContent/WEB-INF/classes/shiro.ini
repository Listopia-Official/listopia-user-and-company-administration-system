[main]
authc.loginUrl = /login.jsf
authc.usernameParam = login:usernameInputText
authc.passwordParam = login:passwordInputPassword

#Changeme
securityManager.rememberMeManager.cipherKey = 0x87f48D387A87E87D87B8777878700234ABCDEEEFFF

dataSource = org.apache.shiro.jndi.JndiObjectFactory
dataSource.resourceName = jdbc/__default

#Configure JDBC realm
jdbcRealm = org.apache.shiro.realm.jdbc.JdbcRealm


#Configure JNDI datasource for JDBC realm
jdbcRealm.dataSource = $dataSource

jdbcRealm.permissionsLookupEnabled = true

#Configure SQL queries for JDBC realm.
jdbcRealm.authenticationQuery = SELECT password FROM loginuser WHERE username = ?
jdbcRealm.userRolesQuery = SELECT name FROM loginroles WHERE id = ANY (SELECT roles_ID FROM loginuser_loginroles WHERE LoginUser_ID = (SELECT id FROM loginuser where username=?))
jdbcRealm.permissionsQuery = SELECT permissions FROM loginpermissions WHERE LoginUserRole_ID=(SELECT id FROM loginroles WHERE name = ?)

#Configure credentials matcher for JDBC and INI realm
passwordService = org.apache.shiro.authc.credential.DefaultPasswordService
passwordMatcher = org.apache.shiro.authc.credential.PasswordMatcher
passwordMatcher.passwordService = $passwordService
iniRealm.credentialsMatcher = $passwordMatcher
jdbcRealm.credentialsMatcher = $passwordMatcher

#Set custom authenticator and authentication strategy
authenticator = florian_haas.lucas.security.ExtendedModularRealmAuthenticator
authcStrategy = florian_haas.lucas.security.ExtendedFirstSuccessfullAuthenticationStrategy
authenticator.authenticationStrategy = $authcStrategy
securityManager.authenticator= $authenticator

#Define the order of the realms
securityManager.realms= $iniRealm, $jdbcRealm

[users]
#Changeme
root = $shiro1$SHA-256$500000$wpXo45Vf2+vzOUFbqbzWyw==$xLBSVoSbkfK5VYFHeFnAmy2ZskQg96R7jh+mqts/eqM=,root

[roles]
root = *

[urls]
/javax.faces.resource/** = anon
/*.xhtml=authc, perms["accessXHTMLs"]
/login.*=authc
/users.*=authc, perms["user:accessView"]
/accounts.*=authc, perms["account:accessView"]
/loginRoles.*=authc, perms["loginRole:accessView"]
/loginUsers.*=authc, perms["loginUser:accessView"]
/preferences.*=authc, perms["login:accessPreferencesView"]
/globalData.*=authc, perms["globalData:accessView"]
/companies.*=authc, perms["company:accessView"]
/rooms.*=authc, perms["room:accessView"]
/employments.*=authc, perms["employment:accessView"]
/jobs.*=authc, perms["job:accessView"]
/transactionLogs.*=authc, perms["account:viewTransactionLogs"]
/items.*=authc, perms["item:accessView"]
/sellItems.*=authc, perms["item:accessView","item:sell"]
/** = authc